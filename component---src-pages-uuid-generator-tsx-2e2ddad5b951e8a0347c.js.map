{"version":3,"file":"component---src-pages-uuid-generator-tsx-2e2ddad5b951e8a0347c.js","mappings":"gMACA,OACEA,WAFmC,oBAAXC,QAA0BA,OAAOD,YAAcC,OAAOD,WAAWE,KAAKD,SCGhG,IAAIE,EACJ,MAAMC,EAAQ,IAAIC,WAAW,IACd,SAASC,IAEtB,IAAKH,IAEHA,EAAoC,oBAAXF,QAA0BA,OAAOE,iBAAmBF,OAAOE,gBAAgBD,KAAKD,SAEpGE,GACH,MAAM,IAAII,MAAM,4GAIpB,OAAOJ,EAAgBC,EACzB,CCXA,MAAMI,EAAY,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,MAAM,IAGzC,SAASC,EAAgBC,EAAKC,EAAS,GAG5C,OAAQP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,MAAMC,aACvf,CCYA,MAxBA,SAAYC,EAASC,EAAKH,GACxB,GAAI,eAAsBG,IAAQD,EAChC,OAAO,eAIT,MAAME,GADNF,EAAUA,GAAW,CAAC,GACDG,SAAWH,EAAQX,KAAOA,KAK/C,GAHAa,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPH,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBS,EAAIH,EAASN,GAAKU,EAAKV,GAGzB,OAAOS,CACT,CAEA,OAAOL,EAAgBM,EACzB,E,gFCxBA,GAAe,EAAAE,EAAA,IAA4B,SAAK,OAAQ,CACtDC,EAAG,sDACD,SCFJ,GAAe,EAAAD,EAAA,IAA4B,SAAK,OAAQ,CACtDC,EAAG,oIACD,e,UC6CJ,MAxC+C,KAC7C,MAAOC,EAAMC,GAAWC,EAAAA,SAAe,KAChCC,EAAUC,GAAeF,EAAAA,UAAe,GAE/C,OACEA,EAAAA,cAACG,EAAAA,EAAU,CAACC,QAAQ,kBAClBJ,EAAAA,cAACK,EAAAA,EAAS,CAACC,IAAK,GACbR,EACCE,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACO,EAAAA,EAAU,KAAC,wBACZP,EAAAA,cAAAA,OAAAA,KAAOF,IAEP,KACJE,EAAAA,cAACQ,EAAAA,EAAW,KACVR,EAAAA,cAACS,EAAAA,EAAM,CACLC,UAAWZ,EAAOE,EAAAA,cAACW,EAAAA,EAAU,MAAM,KACnCC,QAAQ,WACRC,QAAS,IAAMd,EAAQe,MAEtBhB,EAAO,aAAe,YAExBA,EACCE,EAAAA,cAACS,EAAAA,EAAM,CACLC,UAAWT,EAAWD,EAAAA,cAACe,EAAK,MAAMf,EAAAA,cAACgB,EAAW,MAC9CC,MAAOhB,EAAW,UAAY,UAC9BY,QAASK,gBACDC,EAAAA,EAAAA,GAAoBrB,GAC1BI,GAAY,GACZkB,YAAW,IAAMlB,GAAY,IAAQ,IAAK,GAG3CD,EAAW,UAAY,QAExB,OAGG,EAMV,MAAMoB,EAAe,IAAMrB,EAAAA,cAACsB,EAAAA,EAAU,CAACC,MAAM,kB","sources":["webpack://web-tools/./node_modules/uuid/dist/esm-browser/native.js","webpack://web-tools/./node_modules/uuid/dist/esm-browser/rng.js","webpack://web-tools/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://web-tools/./node_modules/uuid/dist/esm-browser/v4.js","webpack://web-tools/./node_modules/@mui/icons-material/esm/Check.js","webpack://web-tools/./node_modules/@mui/icons-material/esm/ContentCopy.js","webpack://web-tools/./src/pages/uuid-generator.tsx"],"sourcesContent":["const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n}), 'Check');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"\n}), 'ContentCopy');","import * as React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { CommonHead, PageLayout } from \"../components/PageLayout\";\nimport { Button, ButtonGroup, Typography } from \"@mui/material\";\nimport { ColumnBox } from \"../components/ColumnBox\";\nimport { Check, ContentCopy, Repeat, RestartAlt } from \"@mui/icons-material\";\nimport { copyTextToClipboard } from \"../utils\";\n\nconst UUIDGeneratorPage: React.FC<PageProps> = () => {\n  const [uuid, setUuid] = React.useState(\"\");\n  const [isCopied, setIsCopied] = React.useState(false);\n\n  return (\n    <PageLayout heading=\"UUID Generator\">\n      <ColumnBox gap={2}>\n        {uuid ? (\n          <>\n            <Typography>Your unique v4 UUID:</Typography>\n            <code>{uuid}</code>\n          </>\n        ) : null}\n        <ButtonGroup>\n          <Button\n            startIcon={uuid ? <RestartAlt /> : null}\n            variant=\"outlined\"\n            onClick={() => setUuid(uuidv4())}\n          >\n            {uuid ? \"Regenerate\" : \"Generate\"}\n          </Button>\n          {uuid ? (\n            <Button\n              startIcon={isCopied ? <Check /> : <ContentCopy />}\n              color={isCopied ? \"success\" : \"primary\"}\n              onClick={async () => {\n                await copyTextToClipboard(uuid);\n                setIsCopied(true);\n                setTimeout(() => setIsCopied(false), 1000);\n              }}\n            >\n              {isCopied ? \"Copied!\" : \"Copy\"}\n            </Button>\n          ) : null}\n        </ButtonGroup>\n      </ColumnBox>\n    </PageLayout>\n  );\n};\n\nexport default UUIDGeneratorPage;\n\nexport const Head: HeadFC = () => <CommonHead title=\"UUID Generator\" />;\n"],"names":["randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","toLowerCase","options","buf","rnds","random","createSvgIcon","d","uuid","setUuid","React","isCopied","setIsCopied","PageLayout","heading","ColumnBox","gap","Typography","ButtonGroup","Button","startIcon","RestartAlt","variant","onClick","uuidv4","Check","ContentCopy","color","async","copyTextToClipboard","setTimeout","Head","CommonHead","title"],"sourceRoot":""}