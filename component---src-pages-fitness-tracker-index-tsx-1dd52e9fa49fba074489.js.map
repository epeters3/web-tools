{"version":3,"file":"component---src-pages-fitness-tracker-index-tsx-1dd52e9fa49fba074489.js","mappings":"qSAmBA,MAAMA,EAAoBC,IAQpB,IARqB,OACzBC,EAAM,QACNC,EAAO,OACPC,GAKDH,EACC,MAAM,EAACI,EAAI,EAAEC,IAAWC,EAAAA,EAAAA,UAAS,KAC3B,EAACC,EAAS,EAAEC,IAAgBF,EAAAA,EAAAA,UAAS,IACrC,EAACG,EAAS,EAAEC,IAAgBJ,EAAAA,EAAAA,UAAS,MACpCK,EAAOC,GAAYC,EAAAA,cAAmCC,GAyB7D,OACED,EAAAA,cAACE,EAAAA,EAAM,CAACC,KAAMf,EAAQC,QAASA,GAC7BW,EAAAA,cAACI,EAAAA,EAAW,KAAC,iBACbJ,EAAAA,cAACK,EAAAA,EAAa,KACZL,EAAAA,cAACM,EAAAA,EAAS,CAACC,IAAK,EAAGC,GAAI,CAAEC,UAAYC,GAAUA,EAAMC,QAAQ,KAC3DX,EAAAA,cAACY,EAAAA,EAAS,CACRC,MAAM,OACNC,MAAOvB,EACPwB,SAAWC,GAAMxB,EAAQwB,EAAEC,OAAOH,SAEpCd,EAAAA,cAACY,EAAAA,EAAS,CACRC,MAAM,aACNK,KAAK,SACLJ,MAAOpB,EACPqB,SAAWC,GAAMrB,EAAawB,SAASH,EAAEC,OAAOH,UAElDd,EAAAA,cAACY,EAAAA,EAAS,CACRC,MAAM,aACNK,KAAK,SACLJ,MAAOlB,EACPmB,SAAWC,GAAMnB,EAAasB,SAASH,EAAEC,OAAOH,UAEjDhB,EAAQE,EAAAA,cAACoB,EAAAA,EAAK,CAACC,SAAS,SAASvB,GAAiB,OAGvDE,EAAAA,cAACsB,EAAAA,EAAa,KACZtB,EAAAA,cAACuB,EAAAA,EAAM,CAACC,QAjDKC,KACjB,IAAKlC,EAEH,YADAQ,EAAS,oBAGX,GAAIL,EAAY,GAAKE,EAAY,EAE/B,YADAG,EAAS,uDAGX,GAAIH,EAAYF,EAEd,YADAK,EAAS,gDAIXA,OAASE,GACT,MAAMyB,EAAqB,CAAEC,IAAIC,EAAAA,EAAAA,KAAUrC,OAAMG,YAAWE,aAC5DN,EAAOoC,GACPlC,EAAQ,IACRG,EAAa,GACbE,EAAa,GACbR,GAAS,GA6BwB,QAC7BW,EAAAA,cAACuB,EAAAA,EAAM,CAACC,QAASnC,GAAS,WAErB,EA0Cb,UAtCqDwC,KACnD,MAAMC,GACJC,EAAAA,EAAAA,KAAa,IAAMC,EAAAA,GAAGF,UAAUG,QAAQ,QAAQC,aAAc,IACzDC,EAAyBC,GAC9BpC,EAAAA,UAAe,GACXqC,EAAeP,EAAUQ,OAAS,EACxC,OACEtC,EAAAA,cAACuC,EAAAA,EAAU,CAACC,QAAQ,mBAClBxC,EAAAA,cAACd,EAAiB,CAChBE,OAAQ+C,EACR9C,QAASA,IAAM+C,GAA2B,GAC1C9C,OAASoC,GAAaM,EAAAA,GAAGF,UAAUW,IAAIf,EAAUA,EAASC,MAE5D3B,EAAAA,cAACM,EAAAA,EAAS,CAACC,IAAK,GACb8B,EACCrC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC0C,EAAAA,EAAU,CAACC,QAAQ,MAAK,eACxBb,EAAUc,KAAKlB,GACd1B,EAAAA,cAACuB,EAAAA,EAAM,CACLsB,IAAKnB,EAASC,GACdmB,KAAM,yBAAyBpB,EAASC,MAEvCD,EAASnC,SAId,KACJS,EAAAA,cAACuB,EAAAA,EAAM,CACLoB,QAAQ,WACRnB,QAASA,IAAMY,GAA2B,IAC3C,uBAIQ,EAMV,MAAMW,EAAeA,IAAM/C,EAAAA,cAACgD,EAAAA,EAAU,CAACC,MAAM,mB","sources":["webpack://web-tools/./src/pages/fitness-tracker/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { HeadFC, PageProps } from \"gatsby\";\nimport { CommonHead, PageLayout } from \"../../components/PageLayout\";\nimport {\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Alert,\n} from \"@mui/material\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ColumnBox } from \"../../components/ColumnBox\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { Exercise, db } from \"../../utils/db\";\nimport { useState } from \"react\";\n\nconst EditExerciseModal = ({\n  isOpen,\n  onClose,\n  onSave,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (exercise: Exercise) => void;\n}) => {\n  const [name, setName] = useState(\"\");\n  const [minWeight, setMinWeight] = useState(0);\n  const [maxWeight, setMaxWeight] = useState(100);\n  const [error, setError] = React.useState<string | undefined>(undefined);\n\n  const handleSave = () => {\n    if (!name) {\n      setError(\"Name is required\");\n      return;\n    }\n    if (minWeight < 0 || maxWeight < 0) {\n      setError(\"Min Weight and Max Weight must both be non-negative\");\n      return;\n    }\n    if (maxWeight < minWeight) {\n      setError(\"Max Weight cannot be smaller than Min Weight\");\n      return;\n    }\n    // Passed validation.\n    setError(undefined);\n    const exercise: Exercise = { id: uuidv4(), name, minWeight, maxWeight };\n    onSave(exercise);\n    setName(\"\");\n    setMinWeight(0);\n    setMaxWeight(0);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Edit Exercise</DialogTitle>\n      <DialogContent>\n        <ColumnBox gap={2} sx={{ marginTop: (theme) => theme.spacing(2) }}>\n          <TextField\n            label=\"Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          ></TextField>\n          <TextField\n            label=\"Min Weight\"\n            type=\"number\"\n            value={minWeight}\n            onChange={(e) => setMinWeight(parseInt(e.target.value))}\n          ></TextField>\n          <TextField\n            label=\"Max Weight\"\n            type=\"number\"\n            value={maxWeight}\n            onChange={(e) => setMaxWeight(parseInt(e.target.value))}\n          ></TextField>\n          {error ? <Alert severity=\"error\">{error}</Alert> : null}\n        </ColumnBox>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleSave}>Save</Button>\n        <Button onClick={onClose}>Cancel</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst FitnessTrackerIndexPage: React.FC<PageProps> = () => {\n  const exercises =\n    useLiveQuery(() => db.exercises.orderBy(\"name\").toArray()) || [];\n  const [isEditExerciseModalOpen, setIsEditExerciseModalOpen] =\n    React.useState(false);\n  const hasExercises = exercises.length > 0;\n  return (\n    <PageLayout heading=\"Fitness Tracker\">\n      <EditExerciseModal\n        isOpen={isEditExerciseModalOpen}\n        onClose={() => setIsEditExerciseModalOpen(false)}\n        onSave={(exercise) => db.exercises.put(exercise, exercise.id)}\n      />\n      <ColumnBox gap={2}>\n        {hasExercises ? (\n          <>\n            <Typography variant=\"h4\">Let's Track</Typography>\n            {exercises.map((exercise) => (\n              <Button\n                key={exercise.id}\n                href={`./exercise?exerciseId=${exercise.id}`}\n              >\n                {exercise.name}\n              </Button>\n            ))}\n          </>\n        ) : null}\n        <Button\n          variant=\"outlined\"\n          onClick={() => setIsEditExerciseModalOpen(true)}\n        >\n          Create an Exercise\n        </Button>\n      </ColumnBox>\n    </PageLayout>\n  );\n};\n\nexport default FitnessTrackerIndexPage;\n\nexport const Head: HeadFC = () => <CommonHead title=\"Fitness Tracker\" />;\n"],"names":["EditExerciseModal","_ref","isOpen","onClose","onSave","name","setName","useState","minWeight","setMinWeight","maxWeight","setMaxWeight","error","setError","React","undefined","Dialog","open","DialogTitle","DialogContent","ColumnBox","gap","sx","marginTop","theme","spacing","TextField","label","value","onChange","e","target","type","parseInt","Alert","severity","DialogActions","Button","onClick","handleSave","exercise","id","uuidv4","FitnessTrackerIndexPage","exercises","useLiveQuery","db","orderBy","toArray","isEditExerciseModalOpen","setIsEditExerciseModalOpen","hasExercises","length","PageLayout","heading","put","Typography","variant","map","key","href","Head","CommonHead","title"],"sourceRoot":""}