{"version":3,"file":"component---src-pages-fitness-tracker-index-tsx-bfd7e601388ff0037775.js","mappings":"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","sources":["webpack://web-tools/./src/pages/fitness-tracker/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { HeadFC, PageProps } from \"gatsby\";\nimport { CommonHead, PageLayout } from \"../../components/PageLayout\";\nimport {\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Alert,\n} from \"@mui/material\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ColumnBox } from \"../../components/ColumnBox\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { Exercise, db } from \"../../utils/db\";\nimport { useState } from \"react\";\nimport { LoadingPage } from \"../../components/Loading\";\nimport { groupExerciseSetsByExerciseAndDate } from \"../../fitness-tracker/utils\";\n\nconst EditExerciseModal = ({\n  isOpen,\n  onClose,\n  onSave,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (exercise: Exercise) => void;\n}) => {\n  const [name, setName] = useState(\"\");\n  const [minWeight, setMinWeight] = useState(0);\n  const [maxWeight, setMaxWeight] = useState(100);\n  const [error, setError] = React.useState<string | undefined>(undefined);\n\n  const handleSave = () => {\n    if (!name) {\n      setError(\"Name is required\");\n      return;\n    }\n    if (minWeight < 0 || maxWeight < 0) {\n      setError(\"Min Weight and Max Weight must both be non-negative\");\n      return;\n    }\n    if (maxWeight < minWeight) {\n      setError(\"Max Weight cannot be smaller than Min Weight\");\n      return;\n    }\n    // Passed validation.\n    setError(undefined);\n    const exercise: Exercise = { id: uuidv4(), name, minWeight, maxWeight };\n    onSave(exercise);\n    setName(\"\");\n    setMinWeight(0);\n    setMaxWeight(0);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose}>\n      <DialogTitle>Edit Exercise</DialogTitle>\n      <DialogContent>\n        <ColumnBox gap={2} sx={{ marginTop: (theme) => theme.spacing(2) }}>\n          <TextField\n            label=\"Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          ></TextField>\n          <TextField\n            label=\"Min Weight\"\n            type=\"number\"\n            value={minWeight}\n            onChange={(e) => setMinWeight(parseInt(e.target.value))}\n          ></TextField>\n          <TextField\n            label=\"Max Weight\"\n            type=\"number\"\n            value={maxWeight}\n            onChange={(e) => setMaxWeight(parseInt(e.target.value))}\n          ></TextField>\n          {error ? <Alert severity=\"error\">{error}</Alert> : null}\n        </ColumnBox>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleSave}>Save</Button>\n        <Button onClick={onClose}>Cancel</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst RecentExercises = ({ numDays }: { numDays: number }) => {\n  const recentExerciseSets = useLiveQuery(() =>\n    db.exerciseSets\n      .orderBy(\"createdAt\")\n      .reverse()\n      .limit(numDays * 30)\n      .toArray()\n  );\n  const exercises = useLiveQuery(() => db.exercises.toArray());\n\n  const isLoading = recentExerciseSets === undefined || exercises === undefined;\n  const grouped = React.useMemo(\n    () =>\n      groupExerciseSetsByExerciseAndDate(\n        recentExerciseSets || [],\n        exercises || []\n      ).slice(0, numDays), // just show the most recent 2 days\n    [recentExerciseSets]\n  );\n  if (isLoading) return <LoadingPage />;\n  if (recentExerciseSets.length === 0) {\n    return null;\n  }\n  return (\n    <ColumnBox gap={2}>\n      <Typography variant=\"h5\">Recent Exercises</Typography>\n      {grouped.map(({ date, sets }) => (\n        <ColumnBox key={date} gap={1}>\n          <Typography variant=\"h6\">{date}</Typography>\n          {sets.map(({ exercise }) => (\n            <Typography variant=\"body2\">{exercise.name}</Typography>\n          ))}\n        </ColumnBox>\n      ))}\n    </ColumnBox>\n  );\n};\n\nconst FitnessTrackerIndexPage: React.FC<PageProps> = () => {\n  const exercises = useLiveQuery(() => db.exercises.orderBy(\"name\").toArray());\n  const [isEditExerciseModalOpen, setIsEditExerciseModalOpen] =\n    React.useState(false);\n  const isLoading = exercises === undefined;\n  if (isLoading) return <LoadingPage />;\n  const hasExercises = exercises.length > 0;\n  return (\n    <PageLayout>\n      <EditExerciseModal\n        isOpen={isEditExerciseModalOpen}\n        onClose={() => setIsEditExerciseModalOpen(false)}\n        onSave={(exercise) => db.exercises.put(exercise, exercise.id)}\n      />\n      <ColumnBox gap={2}>\n        <Typography variant=\"h4\">Fitness Tracker</Typography>\n        {hasExercises ? (\n          <>\n            <Typography variant=\"body1\">Let's Track!</Typography>\n            {exercises.map((exercise) => (\n              <Button\n                key={exercise.id}\n                href={`./exercise?exerciseId=${exercise.id}`}\n              >\n                {exercise.name}\n              </Button>\n            ))}\n          </>\n        ) : null}\n        <Button\n          variant=\"outlined\"\n          onClick={() => setIsEditExerciseModalOpen(true)}\n        >\n          Create an Exercise\n        </Button>\n        <RecentExercises numDays={4} />\n      </ColumnBox>\n    </PageLayout>\n  );\n};\n\nexport default FitnessTrackerIndexPage;\n\nexport const Head: HeadFC = () => <CommonHead title=\"Fitness Tracker\" />;\n"],"names":["EditExerciseModal","_ref","isOpen","onClose","onSave","name","setName","useState","minWeight","setMinWeight","maxWeight","setMaxWeight","error","setError","React","undefined","Dialog","open","DialogTitle","DialogContent","ColumnBox","gap","sx","marginTop","theme","spacing","TextField","label","value","onChange","e","target","type","parseInt","Alert","severity","DialogActions","Button","onClick","handleSave","exercise","id","uuidv4","RecentExercises","_ref2","numDays","recentExerciseSets","useLiveQuery","db","exerciseSets","orderBy","reverse","limit","toArray","exercises","isLoading","grouped","groupExerciseSetsByExerciseAndDate","slice","LoadingPage","length","Typography","variant","map","_ref3","date","sets","key","_ref4","FitnessTrackerIndexPage","isEditExerciseModalOpen","setIsEditExerciseModalOpen","hasExercises","PageLayout","put","href","Head","CommonHead","title"],"sourceRoot":""}